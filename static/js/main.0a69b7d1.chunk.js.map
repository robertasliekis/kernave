{"version":3,"sources":["actions/index.js","components/InteractiveMap.js","components/GreyOverlay.js","App.js","reportWebVitals.js","serviceWorker.js","reducers/setLanguage.js","reducers/allReducers.js","index.js"],"names":["setLanguage","selection","type","payload","legendIconNames","mapTitle","activeIcons","InteractiveMap","props","mouseEnterActiveIcon","ref","console","log","setState","activeIconHovered","activeIconIndex","mouseLeaveActiveIcon","languageBtnClicked","language","state","activeIconsRefs","audioAboutRef","React","createRef","prevProps","prevState","this","classList","remove","add","className","onClick","style","border","map","legendIconName","index","backgroundImage","activeIcon","onMouseEnter","onMouseLeave","transform","Component","mapDispatchToProps","connect","GreyOverlay","languageSelected","display","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","initialState","action","combineReducers","store","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0a69b7d1.chunk.js","sourcesContent":["export const setLanguage = (selection) => {\r\n  return {\r\n    type: \"SET_LANGUAGE\",\r\n    payload: selection\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setLanguage } from \"../actions\";\r\n\r\nconst legendIconNames = [\r\n  [\"aktyvus taškas\", \"active point\"],\r\n  [\"Kernavės archeologinės vietovės muziejus\", \"Archeological museum\"],\r\n  [\"Senosios bažnyčios vieta\", \"Old church\"],\r\n  [\"XIII - XIV a. amatininkų kiemai\", \"XIII - XIV century house\"],\r\n  [\"Senojo Kernavės miesto vieta\", \"Old city place\"],\r\n  [\"Kernavės dvarvietė\", \"another place\"],\r\n  [\"XIII - XIV a. kapinynas\", \"XIII - XIV century cemetary\"],\r\n  [\"Romėniškojo laikotarpio gyvenvietės ir pilkapynas\", \"Old stuff\"],\r\n  [\"Neolito gyvenvietės\", \"More places\"],\r\n  [\"Akmens amžiaus stovyklavietės\", \"Stoneage place\"]\r\n];\r\n\r\nconst mapTitle = [\"Vilniaus Vlastybinio Kernavės kultūrinio rezervato žemėlapis\", \"Map of Vilnius State Kernavė Cultural Reserve\"];\r\n\r\nconst activeIcons = [\r\n  [\"Lokacija 1\", \"Location 1\", 8],\r\n  [\"Lokacija 2\", \"Location 2\", 30],\r\n  [\"Lokacija 3\", \"Location 3\", 60],\r\n  [\"Lokacija 4\", \"Location 4\", 100],\r\n  [\"Lokacija 5\", \"Location 5\", 150],\r\n  [\"Lokacija 6\", \"Location 6\", 10],\r\n  [\"Lokacija 7\", \"Location 7\", 250],\r\n  [\"Lokacija 8\", \"Location 8\", 300]\r\n];\r\n\r\nexport class InteractiveMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeIconHovered: false,\r\n      activeIconIndex: 0\r\n    };\r\n    this.activeIconsRefs = {};\r\n    this.audioAboutRef = React.createRef();\r\n  }\r\n\r\n  mouseEnterActiveIcon = (ref) => {\r\n    console.log(ref);\r\n    this.setState({ activeIconHovered: true, activeIconIndex: ref });\r\n  };\r\n\r\n  mouseLeaveActiveIcon = () => {\r\n    this.setState({ activeIconHovered: false });\r\n  };\r\n\r\n  languageBtnClicked = (language) => {\r\n    this.props.setLanguage(language);\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.activeIconHovered !== prevState.activeIconHovered || this.state.activeIconIndex !== prevState.activeIconIndex) {\r\n      this.activeIconsRefs[this.state.activeIconIndex].classList.remove(\"active-icon-stop\");\r\n      this.activeIconsRefs[prevState.activeIconIndex].classList.remove(\"active-icon-stop\");\r\n      if (this.state.activeIconHovered) {\r\n        this.activeIconsRefs[this.state.activeIconIndex].classList.add(\"active-icon-stop\");\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"interactive-map-container\">\r\n        <div className=\"languages-container\">\r\n          <div\r\n            className=\"btn btn-language-lt\"\r\n            onClick={() => this.languageBtnClicked(\"lithuanian\")}\r\n            style={{ border: this.props.language === \"lithuanian\" ? \"3px solid black\" : \"none\" }}\r\n          >\r\n            LT\r\n          </div>\r\n          <div\r\n            className=\"btn btn-language-en\"\r\n            onClick={() => this.languageBtnClicked(\"english\")}\r\n            style={{ border: this.props.language === \"english\" ? \"3px solid black\" : \"none\" }}\r\n          >\r\n            EN\r\n          </div>\r\n        </div>\r\n        <h1 className=\"map-title\">{this.props.language === \"lithuanian\" ? mapTitle[0] : mapTitle[1]}</h1>\r\n        <div className=\"map-images-container\">\r\n          <div className=\"river-image image\"></div>\r\n          <div className=\"map-image image\"></div>\r\n        </div>\r\n        <div className=\"legend-container\">\r\n          {legendIconNames.map((legendIconName, index) => {\r\n            return (\r\n              <div className=\"legend-item\" key={index}>\r\n                <div className=\"icon-container\">\r\n                  <div\r\n                    className=\"icon\"\r\n                    style={{\r\n                      backgroundImage: `url(\"./images/Asset ${index + 2}.png\")`\r\n                    }}\r\n                  ></div>\r\n                </div>\r\n                <div className=\"name\">{this.props.language === \"lithuanian\" ? legendIconName[0] : legendIconName[1]}</div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"active-icons-container\">\r\n          {activeIcons.map((activeIcon, index) => {\r\n            return (\r\n              <div\r\n                className=\"active-icon\"\r\n                key={index}\r\n                ref={(ref) => {\r\n                  this.activeIconsRefs[index] = ref;\r\n                }}\r\n                onMouseEnter={() => this.mouseEnterActiveIcon(index)}\r\n                onMouseLeave={() => this.mouseLeaveActiveIcon()}\r\n              >\r\n                <div className=\"icon-scale\">\r\n                  <div\r\n                    className=\"icon-rotation\"\r\n                    style={{\r\n                      transform: `rotate(${activeIcon[2]}deg)`\r\n                    }}\r\n                  >\r\n                    <div\r\n                      className=\"icon\"\r\n                      style={{\r\n                        backgroundImage: `url(\"./images/icon-spinning.png\")`\r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"icon-title\">{this.props.language === \"lithuanian\" ? activeIcon[0] : activeIcon[1]}</div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.setLanguage.language\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setLanguage\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InteractiveMap);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setLanguage } from \"../actions\";\r\n\r\nexport class GreyOverlay extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      languageSelected: false\r\n    };\r\n  }\r\n  languageBtnClicked = (language) => {\r\n    this.props.setLanguage(language);\r\n    this.setState({ languageSelected: true });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"grey-overlay\" style={{ display: this.state.languageSelected ? \"none\" : \"flex\" }}>\r\n        <div className=\"language-selection-container\">\r\n          <div className=\"text\">Pasirinkite kalbą:</div>\r\n          <div className=\"btn-container\">\r\n            <div className=\"btn btn-language-lt\" onClick={() => this.languageBtnClicked(\"lithuanian\")}>\r\n              LT\r\n            </div>\r\n            <div className=\"btn btn-language-en\" onClick={() => this.languageBtnClicked(\"english\")}>\r\n              EN\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.setLanguage.language\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setLanguage\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GreyOverlay);\r\n","import React from \"react\";\n\nimport InteractiveMap from \"./components/InteractiveMap\";\nimport GreyOverlay from \"./components/GreyOverlay\";\n\n// \"homepage\": \"http://https://robertasliekis.github.io/kernave/\",\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"overflow-wrapper\">\n        <GreyOverlay />\n        <div className=\"website-wrapper\">\n          <InteractiveMap />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\");\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n  language: \"lithuanian\"\r\n};\r\n\r\nconst setLanguage = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_LANGUAGE\":\r\n      return { ...state, language: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setLanguage;\r\n","import { combineReducers } from \"redux\";\r\nimport setLanguage from \"./setLanguage\";\r\n\r\nexport default combineReducers({\r\n  setLanguage: setLanguage\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducers from \"./reducers/allReducers\";\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n//serviceWorker.register();\nreportWebVitals();\n"],"sourceRoot":""}